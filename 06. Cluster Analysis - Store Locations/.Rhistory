stations = read.csv('Ch5_bike_station_locations.csv')
two = kmeans(stations, 2)
two
stations = read.csv('Ch5_bike_station_locations.csv')
two = kmeans(stations, 2)
two
data = read.csv('Ch5_bike_station_locations.csv')
summary(data)
str(data)
hist(data$latitude)
plot(data$latitude, data$longitude)
plot(data$latitude, data$longitude, asp = 1)
plot(data$longitude, data$latitude, asp = 1)
?plot
kmean(data,2)
kmeans(data,2)
?kmeans
set.seed(123)
kmeans(data,2)
kmenas(data,3)
set.seed(123)
kmeans(data,2)
kmeans(data,3)
set.seed(123)
kmeans(data,3)
kmeans(data,3)
kmeans(data,3)
set.seed(123)
kmeans(data,3)
set.seed(123)
kmeans(data,3)
set.seed(123)
kmeans(data,3)
set.seed(123)
kmeans(data,3)
plot(clus$longitude, clus$latitude)
km = kmeans(data,3)
data = read.csv('Ch5_bike_station_locations.csv')
summary(data)
plot(data$longitude, data$latitude, asp = 1)
set.seed(123)
km = kmeans(data,3)
str(km)
km
clus = cbind(data, km$cluster)
plot(clus$longitude, clus$latitude)
plot(clus$longitude, clus$latitude, col = km$cluster)
stations = read.csv('Ch5_bike_station_locations.csv')
two = kmeans(stations, 2)
two
market = read.csv('Ch5_age_income_data.csv')
market
three = kmeans(market[,c(2,3)], 3)
plot(market$age, market$income, col=three$cluster)
market$age_scale = as.numeric(scale(market$age))
market$inc_scale = as.numeric(scale(market$income))
three_scale = kmeans(market[, c(4,5)],3)
plot(market$age_scale, market$inc_scale, col=three_scale$cluster,
main='K-means with Scaling')
set.seed(456)
hc_mod = hclust(dist(market[, 4:5]), method='ward.D2')
hc_mod
?as.dendrogram
?dend_six_color
?color_branches
library(dendextend)
?color_branches
?color_branches
plot(dend_six_color)
plot(dend)
# convert hierarchical clustering into dendrogram for visualization
# dendrogram is a tree-like hierarchical clustering structure
dend = as.dendrogram(hc_mod)
plot(dend)
plot(dend_six_color)
# set color to six
dend_six_color = color_branches(dend, k=6)
plot(dend_six_color)
str(market)
plot(dend_six_color, leaflab = 'none')
# convert hierarchical clustering into dendrogram for visualization
# dendrogram is a tree-like hierarchical clustering structure
dend = as.dendrogram(hc_mod)
# library for branches color
library(dendextend)
# set the number of cluster
dend_six_color = color_branches(dend, k=6)
# k = 6: 6 color for 6 cluster
# plot the dendrogram
plot(dend_six_color, leaflab='none', horiz=T, main='Age and Income Dendrogram',
xlab='Height');abline(v=37.5, lty='dashed',col='blue')
# leaflab = 'none' : suppress numerical labes at the end of the dendrogram
# horiz = T : change the layout of the visualization
str(cut(dend, h=37.5)$upper)
one = kmeans(market[,c(4,5)], 1)
two = kmeans(market[,c(4,5)], 2)
three = kmeans(market[,c(4,5)], 3)
four = kmeans(market[,c(4,5)], 4)
five = kmeans(market[,c(4,5)], 5)
six = kmeans(market[,c(4,5)], 6)
seven = kmeans(market[,c(4,5)], 7)
eight = kmeans(market[,c(4,5)], 8)
nine = kmeans(market[,c(4,5)], 9)
ten = kmeans(market[,c(4,5)], 10)
one = kmeans(market[,c(4,5)], 1)
two = kmeans(market[,c(4,5)], 2)
three = kmeans(market[,c(4,5)], 3)
four = kmeans(market[,c(4,5)], 4)
five = kmeans(market[,c(4,5)], 5)
six = kmeans(market[,c(4,5)], 6)
seven = kmeans(market[,c(4,5)], 7)
eight = kmeans(market[,c(4,5)], 8)
nine = kmeans(market[,c(4,5)], 9)
ten = kmeans(market[,c(4,5)], 10)
optimize <- data.frame(clusters = c(2:10), wss = rep(0, 9))
optimize[1, 2] <- as.numeric(two$tot.withinss)
optimize[2, 2] <- as.numeric(three$tot.withinss)
optimize[3, 2] <- as.numeric(four$tot.withinss)
optimize[4, 2] <- as.numeric(five$tot.withinss)
optimize[5, 2] <- as.numeric(six$tot.withinss)
optimize[6, 2] <- as.numeric(seven$tot.withinss)
optimize[7, 2] <- as.numeric(eight$tot.withinss)
optimize[8, 2] <- as.numeric(nine$tot.withinss)
optimize[9, 2] <- as.numeric(ten$tot.withinss)
plot(optimize$wss ~ optimize$clusters, type = "b",
ylim = c(0, 12000), ylab = 'Within Sum of Square Error',
main = 'Finding Optimal Number of Clusters Based on Error',
xlab = 'Number of Clusters', pch = 17, col = 'black')
german_credit = read.csv('/Data/german_credit.csv')
getwd()
german_credit = read.csv('./Data/german_credit.csv')
german_credit = read.csv('./Data/german_credit.csv')
german_credit = read.csv('./Data/german_credit.csv')
str(german_credit)
margin.table(prop.table(table(Duration.in.Current.address, Most.valuable.available.asset, Concurrent.Credits,No.of.Credits.at.this.Bank,Occupation,No.of.dependents,Telephone, Foreign.Worker)),1)
attach(german_credit)
margin.table(prop.table(table(Duration.in.Current.address, Most.valuable.available.asset, Concurrent.Credits,No.of.Credits.at.this.Bank,Occupation,No.of.dependents,Telephone, Foreign.Worker)),1)
library(arules)
# see all data in arules package
data(package = 'arules')
# load data
data('Groceries')
# see data class
class(Groceries)
inspect(head(Groceries))
data = as(Groceries, 'transactions')
data
itemFrequencyPlot(Groceries, topN=10)
library(arules)
# see all data in arules package
data(package = 'arules')
# load data
data('Groceries')
# see data class
class(Groceries)
inspect(head(Groceries))
data = as(Groceries, 'transactions')
data
itemFrequencyPlot(Groceries, topN=10)
rules = apriori(data, parameter = list(supp=0.05, conf=0.1))
head(rules)
inspect(head(rules))
sorted_rules = sort(rules, by='lift', decreasing=TRUE)
inspect(sorted_rules[1:5])
library(arulesViz)
plot(sorted_rules)
plot(sorted_rules, method = 'graph')
plot(sorted_rules, method='paracoord')
unique(german_credit$Account.Balance)
library(dplyr)
unique(german_credit$Account.Balance)
df = german_credit %>%
mutate(acc.bal = factor(Account.Balance), levels = c(1,2,3,4),
labels = c('no acc', '0 bal', '<200', '>200'))
df = german_credit %>%
mutate(acc.bal = as.factor(Account.Balance))
unique(german_credit$Creditability)
unique(german_credit$Payment.Status.of.Previous.Credit)
unique(german_credit$Length.of.current.employment)
unique(german_credit$No.of.Credits.at.this.Bank)
model = glm(Creditability~., family=binomial, data = df)
model
summary(model)
vif(model)
library(car)
vif(model)
fitted.values(LogisticModel50final)
fitted.values(model)
head(fitted.values(model))
head(german_credit$Creditability)
# setting threshold
t = rep(0,500)
t
fit
fit
fit = head(fitted.values(model))
fit = head(fitted.values(model))
fit
fit[2]
?performance
?itemFrequencyPlot
?inspect
?as
fitted.values()
?fitted.values
?crossTable
?apriori
ls('pacakage::arules')
ls('package::arules')
?plot
data(package='ggplot2')
ls('package::ggplot2')
ls("package:datasets")
ls('package:ggplot2')
lsf.str("package:ROCR")  # Lists all functions with brief descriptions
library(ROCR)
lsf.str("package:ROCR")  # Lists all functions with brief descriptions
help(package="ROCR")  # Opens documentation with all functions
ls('package::ROCR')
library(ROCR)
ls('package:ROCR')
read.table(from='clipboard')
read.table(file='clipboard')
cm = read.table(file='clipboard')
cm
cm = read.table(file='clipboard', header = T)
cm = read.table(file='clipboard', header = T, sep = '\t')
cm
cm = read.table(file='clipboard', header = T, sep = ',')
cm
cm = read.table(file='clipboard', header = T, sep = ',')
cm
cm = read.table(file='clipboard', header = T, sep = '\t')
cm
str(cm)
apropos(pie)
apropos('pie')
pie(cm$Gender)
barplot(cm$Gender)
cm = cm %>% mutate(Gender = as.factor$Gender)
cm = cm %>% mutate(Gender = as.factor(cm$Gender))
str(cm)
fix(cm)
cm = read.csv(file.choose())
pie(cm$Gender)
barplot(cm$Gender)
cm = cm %>% mutate(Gender = as.factor(Gender))
str(cm)
pie(cm$Gender)
barplot(cm$Gender)
cm$Gender
barplot(table(cm$Gender))
barplot(table(cm$Gender))
pie(table(cm$Gender))
sort(cm$Name)
sort(cm, by = Name)
?sort
?arange
?arrange
?order
order(cm$Gender)
cm[order(cm$Name), ]
cm[order(cm$TOTAL.35.)]
cm[order(cm$TOTAL.35.), ]
?CrossTable
?CrossTable
library(arules)
?CrossTable
library(crosstable)
install.packages('crosstable')
library(crosstable)
?CrossTable
ls('package:crosstable')
library(gmodels)
?CrossTable
ls('package:arules')
ls('package:ROCR')
CrossTable(Creditability, Account.Balance)
table(Creditability, Account.Balance)
CrossTable(Creditability, Account.Balance, digits = 1)
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F)
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F, prop.t = F)
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F, prop.t = F,
prop.chisq = F)
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
?CrossTable
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F, prop.t = F,
prop.chisq = F, chisq = F)
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(Creditability, Account.Balance, digits = 1, prop.r = F, prop.t = F,
prop.chisq = F, chisq = F)
?margin.table
table(Duration.in.Current.address, Most.valuable.available.asset)
table(Duration.in.Current.address, Most.valuable.available.asset,
Concurrent.Credits)
table(Duration.in.Current.address, Most.valuable.available.asset,
Concurrent.Credits, No.of.Credits.at.this.Bank)
prop.table(table(Duration.in.Current.address, Most.valuable.available.asset,
Concurrent.Credits, No.of.Credits.at.this.Bank))
?prop.table
margin(prop.table(table(Duration.in.Current.address,
Most.valuable.available.asset, Concurrent.Credits,
No.of.Credits.at.this.Bank)))
margin.table(prop.table(table(Duration.in.Current.address,
Most.valuable.available.asset, Concurrent.Credits,
No.of.Credits.at.this.Bank)))
margin.table(prop.table(table(Duration.in.Current.address,
Most.valuable.available.asset, Concurrent.Credits,
No.of.Credits.at.this.Bank)), 1)
?margin.table
margin.table(prop.table(table(Duration.in.Current.address,
Most.valuable.available.asset,
Concurrent.Credits,
No.of.Credits.at.this.Bank,Occupation,
No.of.dependents,Telephone, Foreign.Worker)),2)
margin.table(prop.table(table(Duration.in.Current.address, Most.valuable.available.asset)))
margin.table(prop.table(table(Duration.in.Current.address, Most.valuable.available.asset)), 1)
margin.table(prop.table(table(Duration.in.Current.address, Most.valuable.available.asset)), 2)
margin.table(prop.table(table(Most.valuable.available.asset)), 1)
margin.table(prop.table(table(Most.valuable.available.asset)))
margin.table(prop.table(table(Duration.in.Current.address)), 1)
margin.table(prop.table(table(Most.valuable.available.asset)), 1)
str(german_credit)
margin.table(prop.table(table(Account.Balance)), 1)
ifelse(Account.Balance == 4, 3, Account.Balance)
german_credit$Account.Balance = ifelse(Account.Balance == 4, 3, Account.Balance)
margin.table(prop.table(table(Account.Balance)), 1)
german_credit$Account.Balance = ifelse(Account.Balance == 4, 3, Account.Balance)
margin.table(prop.table(table(Account.Balance)), 1)
table(german_credit$Account.Balance)/sum(table(german_credit$Account.Balance))
margin.table(prop.table(table(Account.Balance)), 1)
# alternative way
table(german_credit$Account.Balance)/sum(table(german_credit$Account.Balance))
CrossTable(german_credit$Creditability,
german_credit$Account.Balance, digits = 1, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
?chisq
?chi.sq
apropos('chi')
?chisq.test
chisq.test(german_credit$Creditability, german_credit$Account.Balance)
?t.test
t.test(german_credit$Age..years., german_credit$Creditability)
t.test(german_credit$Creditability, german_credit$Age..years.)
library(tree)
tree(Creditability~Account.Balance, data = german_credit, method = 'class')
