load('./Data/titanic.raw.rdata')
head(titanic.raw)
str(titanic.raw)
par(mfrow=c(2,2))
barplot(titanic.raw$Class)
table(titanic.raw$Class)
barplot(table(titanic.raw$Class))
par(mfrow=c(2,2))
barplot(table(titanic.raw$Class))
barplot(table(titanic.raw$Sex))
barplot(table(titanic.raw$Age))
barplot(table(titanic.raw$Survived))
titanic = as(titanic.raw,'transactions')
library(arules)
titanic = as(titanic.raw,'transactions')
rule = apriori(titanic )
par(mfrow=c(2,2))
plot(rule, method = 'paracoord')
library(arulesViz)
par(mfrow=c(2,2))
plot(rule, method = 'paracoord')
plot(rule, method = 'graph')
library(arulesViz)
par(mfrow=c(2,2))
plot(rule, method = 'paracoord')
plot(rule, method = 'graph')
par(mfrow=c(2,2))
plot(rule, method = 'paracoord')
plot(rule, method = 'graph')
library(arulesViz)
par(mfrow=c(2,2))
plot(rule, method = 'paracoord')
plot(rule, method = 'graph')
class(titanic.raw)
itemFrequencyPlot(titanic, topN = 10)
itemFrequencyPlot(titanic, topN = 10)
?itemFrequencyPlot
rule = apriori(titanic, parameter = list(supp=0.1, conf = 0.6))
inspect(head(rule))
rule1 = apriori(titanic, parameter = list(supp = 0.1, conf = 0.6),
appearance = list(default = 'lhs', rhs = 'Survived=Yes'))
inspect(head(rule1))
titanic.raw
rule2 = apriori(titanic, parameter = list(supp = 0.1, conf = 0.6),
appearance = list(lhs = c('Class=1st', 'Class=2nd', 'Class=3rd', 'Age=Child',
'Age=Adult'), rhs = 'Survived=Yes'))
inspect(head(rule2))
rule2 = apriori(titanic, parameter = list(supp = 0.1, conf = 0.5),
appearance = list(lhs = c('Class=1st', 'Class=2nd', 'Class=3rd', 'Age=Child',
'Age=Adult'), rhs = 'Survived=Yes'))
inspect(head(rule2))
rule2 = apriori(titanic, parameter = list(supp = 0.1, conf = 0.05),
appearance = list(lhs = c('Class=1st', 'Class=2nd', 'Class=3rd', 'Age=Child',
'Age=Adult'), rhs = 'Survived=Yes'))
inspect(head(rule2))
library(arules)
itemFrequencyPlot(titanic, topN = 10)
library(forecast)
data("AirPassengers")
plot(decompose(AirPassengers))
seq_down <- seq(.625, .125, -0.125)
seq_up <- seq(0, 1.5, 0.25)
y <- c(seq_down, seq_up, seq_down + .75, seq_up + .75, seq_down + 1.5,
seq_up + 1.5)
par(mfrow = c(1, 3))
plot(y, type = "b", ylim = c(-.1, 3))
plot(diff(y), ylim = c(-.1, 3), xlim = c(0, 36))
plot(diff(diff(y), lag = 12), ylim = c(-.1, 3), xlim = c(0, 36))
par(mfrow = c(1, 1))
par(mfrow=c(1,2))
acf(y)
pacf(y)
library(lubridate) # year, month
library(dplyr) # %>%
library(forecast) # auto.arima
cycle = read.csv('./Data/Ch6_ridership_data_2011-2012.csv')
str(data)
library(dplyr)
library(lubridate)
cycle$datetime = as.Date(cycle$datetime, format = '%Y-%m-%d')
str(cycle)
monthly_ride = cycle %>%
group_by(year = year(datetime), month = month(datetime)) %>%
summarise(riders = sum(count))
table(monthly_ride$year, monthly_ride$month)
riders = monthly_ride[,3]
monthly = ts(riders, frequency = 12, start = c(2011,1))
class(monthly)
monthly
plot(decompose(monthly))
plot(monthly)
y=diff(monthly)
plot(y)
z=diff(diff(monthly), lag =12)
plot(z)
par(mfrow=c(1,2))
acf(monthly)
pacf(monthly)
model1 = arima(monthly, c(1,0,0), seasonal=list(order=c(0,0,0)))
model2 = arima(monthly, c(1,1,0), seasonal=list(order=c(0,0,0)))
model3 = arima(monthly, c(2,1,0), seasonal=list(order=c(0,0,0)))
model4 = arima(monthly, c(1,1,0), seasonal=list(order=c(0,1,0)))
model5 = arima(monthly, c(0,1,1), seasonal=list(order=c(0,0,0)))
aic = c(model1$aic, model2$aic, model3$aic, model4$aic, model5$aic)
model = seq(1:5)
p_value = c(model1$p)
df = data.frame(model, aic)
df
tsdiag(model1)
tsdiag(model2)
tsdiag(model3)
tsdiag(model4)
tsdiag(model5)
auto.arima(monthly)
yr_forecast = forecast(monthly, h=12)
plot(yr_forecast)
tbats(monthly)
j=forecast(tbats(monthly), h=12)
plot(j)
summary(j$mean)
summary(j$upper)
summary(j$lower)
mean_2011 = round(as.numeric(filter(monthly_ride, year == 2011) %>%
summarise(mean = mean(riders))), 0)
mean_2012 = round(as.numeric(filter(monthly_ride, year == 2012) %>%
summarise(mean = mean(riders))), 0)
mean_2013 = round(mean(j$mean),0)
max_mean_2013 = round(max(j$mean),0)
tsdiag(auto.arima(monthly))
str(auto.arima(monthly))
# import .csv file into R
gc = read.csv('./Data/german_credit.csv')
# take a look at the structure of the data
str(gc)
cat.table = data.frame(var = character(), p.value = numeric())
for (i in names(gc[, c('acc.bal', "pmt.stat.prev.cr", "Purpose", "savings.stocks",
"len.emp", "installment", "sex", "dur.curr.add",
"type.apartment", "most.val.asset", "cr.at.bank",
"Guarantors", "Occupation", "Concurrent.Credits",
"no.dependent", "tel")])) {
p.value = round(chisq.test(gc$cr, gc[, i])$p.value, 2)
df = data.frame(var = i, p.value)
cat.table = rbind(cat.table, df)
}
# import .csv file into R
gc = read.csv('./Data/german_credit.csv')
# take a look at the structure of the data
str(gc)
library(dplyr)
names(gc)[1] = 'cr'
table(gc$cr)/sum(table(gc$cr))
gc$cr = as.factor(gc$cr)
names(gc)[2] = 'acc.bal'
table(gc$acc.bal)/sum(table(gc$acc.bal))
# we wish to combine category 4 into 3
gc$acc.bal = replace(gc$acc.bal, gc$acc.bal == 4, 3)
gc$acc.bal = factor(gc$acc.bal, levels = seq(1:3),
labels = c('No Acc', 'No Bal', 'Has Bal'))
table(gc$acc.bal)/sum(table(gc$acc.bal))
names(gc)[4] = 'pmt.stat.prev.cr'
table(gc$pmt.stat.prev.cr)/sum(table(gc$pmt.stat.prev.cr))
# we wish to combine category 1 into 0, and 4 into 3. Then shift downward
gc$pmt.stat.prev.cr[gc$pmt.stat.prev.cr <= 1] = 1
gc$pmt.stat.prev.cr[gc$pmt.stat.prev.cr == 2] = 2
gc$pmt.stat.prev.cr[gc$pmt.stat.prev.cr >= 3] = 3
table(gc$pmt.stat.prev.cr)/sum(table(gc$pmt.stat.prev.cr))
gc$pmt.stat.prev.cr = factor(gc$pmt.stat.prev.cr, levels = seq(1:3),
labels = c('Some probs', 'paid up', 'no prob'))
names(gc)[7] = 'savings.stocks'
table(gc$savings.stocks)/sum(table(gc$savings.stocks))
gc$savings.stocks[gc$savings.stocks == 4] = 3
gc$savings.stocks[gc$savings.stocks == 5] = 4
gc$savings.stocks = factor(gc$savings.stocks, levels = seq(1:4),
labels = c('none', '<100', '100-1000', '>1000'))
table(gc$savings.stocks)/sum(table(gc$savings.stocks))
names(gc)[8] = 'len.emp'
table(gc$len.emp)/sum(table(gc$len.emp))
gc$len.emp[gc$len.emp == 2] = 1
gc$len.emp[gc$len.emp == 3] = 2
gc$len.emp[gc$len.emp == 4] = 3
gc$len.emp[gc$len.emp == 5] = 4
gc$len.emp = factor(gc$len.emp, levels = seq(1:4),
labels = c('< 1', '1-4', '4-7', '>7'))
table(gc$Occupation)/sum(table(gc$Occupation))
gc$Occupation[gc$Occupation == 2] = 1
gc$Occupation[gc$Occupation == 3] = 2
gc$Occupation[gc$Occupation == 4] = 3
gc$Occupation = factor(gc$Occupation, levels = seq(1:3),
labels = c('unemp', 'skilled', 'exec'))
names(gc)[10] = 'sex'
table(gc$sex)/sum(table(gc$sex))
gc$sex[gc$sex == 2] = 1
gc$sex[gc$sex == 3] = 2
gc$sex[gc$sex == 4] = 3
gc$sex = factor(gc$sex, levels = seq(1:3),
labels = c('single male', 'married male', 'female'))
names(gc)[17] = 'cr.at.bank'
table(gc$cr.at.bank)/sum(table(gc$cr.at.bank))
gc$cr.at.bank[gc$cr.at.bank >= 2] = 2
gc$cr.at.bank = factor(gc$cr.at.bank, levels = seq(1:2),
labels = c('1', '>1'))
table(gc$Guarantors)/sum(table(gc$Guarantors))
gc$Guarantors[gc$Guarantors >= 2] = 2
gc$Guarantors = factor(gc$Guarantors, levels = seq(1:2),
labels = c('no', 'yes'))
names(gc)[12] = 'dur.curr.add'
gc$dur.curr.add = as.factor(gc$dur.curr.add)
names(gc)[13] = 'most.val.asset'
gc$most.val.asset = as.factor(gc$most.val.asset)
table(gc$Concurrent.Credits)/sum(table(gc$Concurrent.Credits))
gc$Concurrent.Credits[gc$Concurrent.Credits <= 2] = 1
gc$Concurrent.Credits[gc$Concurrent.Credits == 3] = 2
gc$Concurrent.Credits = factor(gc$Concurrent.Credits, levels = seq(1:2),
labels = c('yes', 'no'))
names(gc)[16] = 'type.apartment'
gc$type.apartment = as.factor(gc$type.apartment)
table(gc$Purpose)/sum(table(gc$Purpose))*100
gc$Purpose[gc$Purpose == 0] = 11
gc$Purpose[gc$Purpose %in% c(3, 4, 5, 6)] = 3
gc$Purpose[gc$Purpose %in% c(8, 9, 10, 11)] = 4
gc$Purpose = factor(gc$Purpose, levels = seq(1:4),
labels = c('new car', 'used car', 'house', 'other'))
names(gc)[9] = 'installment'
gc$installment = as.factor(gc$installment)
names(gc)[19] = 'no.dependent'
gc$no.dependent = as.factor(gc$no.dependent)
names(gc)[20] = 'tel'
gc$tel = as.factor(gc$tel)
names(gc)[21] = 'foreign.worker'
gc$foreign.worker = as.factor(gc$foreign.worker)
library(gmodels)
CrossTable(gc$cr,gc$acc.bal, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$pmt.stat.prev.cr, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$savings.stocks, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$len.emp, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$sex, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$cr.at.bank, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$Guarantors, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$Concurrent.Credits, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$type.apartment, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$no.dependent, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$Purpose, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
CrossTable(gc$cr,gc$installment, digits = 3, prop.r = F, prop.t = F,
prop.chisq = F, chisq = T)
# alternative ways
table(gc$acc.bal)/sum(table(gc$acc.bal))
margin.table(prop.table(table(gc$installment)),1)
str(gc)
summary(gc$Duration.of.Credit..month.)
summary(gc$Credit.Amount)
summary(gc$Age..years.)
par(mfrow=c(1,3))
hist(gc$Duration.of.Credit..month., breaks = 6, xlab = 'Credit Month')
hist(gc$Credit.Amount, breaks = 20, xlab = 'Credit Amount')
hist(gc$Age..years., xlab = 'Age')
boxplot(gc$Duration.of.Credit..month., xlab = 'Credit Month', asp = 1)
boxplot(gc$Credit.Amount, xlab = 'Credit Amount', asp = 1)
boxplot(gc$Age..years., xlab = 'Age', asp = 1)
cat.table = data.frame(var = character(), p.value = numeric())
for (i in names(gc[, c('acc.bal', "pmt.stat.prev.cr", "Purpose", "savings.stocks",
"len.emp", "installment", "sex", "dur.curr.add",
"type.apartment", "most.val.asset", "cr.at.bank",
"Guarantors", "Occupation", "Concurrent.Credits",
"no.dependent", "tel")])) {
p.value = round(chisq.test(gc$cr, gc[, i])$p.value, 2)
df = data.frame(var = i, p.value)
cat.table = rbind(cat.table, df)
}
cat.table
# split data into train and test
indexes = sample(1:nrow(gc), size = 0.5 * nrow(gc))
# sample from dataset of a seq of number 1 to 1000 and take 500 sample dataset from it
train = gc[indexes, ]
test = gc[-indexes, ]
# this step wont carry the data type of the previous data, you'll need to re-convert tha data type into factor where necessary
model = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
family=binomial, data=train)
summary(model)
model1 = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
family=binomial, data=train)
summary(model1)
model = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
family=binomial, data=train)
summary(model)
model1 = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
family=binomial, data=train)
summary(model1)
model2 = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+len.emp+sex,
family=binomial, data=train)
summary(model2)
model = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
family=binomial, data=train)
summary(model)
library(tree)
model_tree = tree(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
method='class', data=train)
plot(model_tree)
text(model_tree, cex = 0.6)
library(tree)
set.seed(30)
model_tree = tree(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
method='class', data=train)
plot(model_tree)
text(model_tree, cex = 0.6)
train_pred = predict(model_tree, train, type='class')
ct1 = table(train$cr, train_pred)
sum(diag(ct1))/500*100
fit_tree_train = predict(model_tree, data = train)
train_pred = prediction(fit_tree_train[,2], train$cr)
train_perf = performance(train_pred, 'tpr', 'fpr')
plot(train_perf)
fit_tree_train = predict(model_tree, data = train)
fit_tree_train
train_pred = predict(model_tree, train, type='class')
ct1 = table(train$cr, train_pred)
sum(diag(ct1))/500*100
fit_tree_train = predict(model_tree, data = train)
train_pred = prediction(fit_tree_train[,2], train$cr)
train_perf = performance(train_pred, 'tpr', 'fpr')
plot(train_perf)
test_pred = predict(model_tree, data = test)
prod_pred = prediction(test_pred[,2], train$cr)
test_perf = performance(prod_pred, 'tpr', 'fpr')
plot(test_perf)
test_pred = predict(model_tree, data = test)
prod_pred = prediction(test_pred[,2], test$cr)
test_perf = performance(prod_pred, 'tpr', 'fpr')
plot(test_perf)
test_pred = predict(model_tree, data = test)
prod_pred = prediction(test_pred[,2], test$cr)
test_perf = performance(prod_pred, 'tpr', 'fpr')
plot(test_perf)
model_tree_prune = prune.misclass(model_tree, best = 8)
model_tree_prune = prune.misclass(model_tree, best = 8)
prune_train = predict(model_tree_prune, data = train)
prune_train_pred = prediction(prune_train[,2], train$cr)
prune_train_perf = performance(prune_train_pred, 'tpr', 'fpr')
plot(prune_train_perf)
prune_test = predict(model_tree_prune, data = test)
prune_test_pred = prediction(prune_test[,2], test$cr)
prune_test_perf = performance(prune_test_pred, 'tpr', 'fpr')
plot(prune_test_perf)
fit = fitted.values(model1)
# setting threshold
t = rep(0,500)
for (i in 1:500) {
if (fit[i] >= 0.5) {
t[i] = 1
}
}
# create cross table
conf.mat = table(t, train$cr)
conf.mat
CrossTable(train$cr,t, digits = 3, prop.r = F, prop.c = F, prop.chisq = F)
sum(diag(conf.mat))/500 * 100
pred_test = predict(model1, data = test, type = 'response')
t_test = rep(0,500)
for (i in 1:500) {
if (pred_test[i] > 0.5) {
t_test[i] = 1
} else {
t_test[i] = 0
}
}
str(t_test)
CrossTable(test$cr, t_test, digits = 1, prop.t = F, prop.r = F, prop.chisq = F,
chisq = F)
conf.mt.test = table(test$cr, t_test)
sum(diag(conf.mt.test))/500 * 100
model = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+savings.stocks+len.emp+sex+
most.val.asset+Concurrent.Credits+type.apartment+
Duration.of.Credit..month.+Credit.Amount+Age..years.,
family=binomial, data=train)
summary(model)
model2 = glm(cr~acc.bal+pmt.stat.prev.cr+Purpose+len.emp+sex,
family=binomial, data=train)
summary(model2)
library(forecast)
data("AirPassengers")
plot(decompose(AirPassengers))
seq_down <- seq(.625, .125, -0.125)
seq_up <- seq(0, 1.5, 0.25)
y <- c(seq_down, seq_up, seq_down + .75, seq_up + .75, seq_down + 1.5,
seq_up + 1.5)
par(mfrow = c(1, 3))
plot(y, type = "b", ylim = c(-.1, 3))
plot(diff(y), ylim = c(-.1, 3), xlim = c(0, 36))
plot(diff(diff(y), lag = 12), ylim = c(-.1, 3), xlim = c(0, 36))
par(mfrow = c(1, 1))
par(mfrow=c(1,2))
acf(y)
pacf(y)
library(lubridate) # year, month
library(dplyr) # %>%
library(forecast) # auto.arima
cycle = read.csv('./Data/Ch6_ridership_data_2011-2012.csv')
str(data)
library(dplyr)
library(lubridate)
cycle$datetime = as.Date(cycle$datetime, format = '%Y-%m-%d')
str(cycle)
monthly_ride = cycle %>%
group_by(year = year(datetime), month = month(datetime)) %>%
summarise(riders = sum(count))
table(monthly_ride$year, monthly_ride$month)
riders = monthly_ride[,3]
monthly = ts(riders, frequency = 12, start = c(2011,1))
class(monthly)
monthly
plot(decompose(monthly))
plot(monthly)
y=diff(monthly)
plot(y)
z=diff(diff(monthly), lag =12)
plot(z)
par(mfrow=c(1,2))
acf(monthly)
pacf(monthly)
tsdiag(model1)
library(forecast)
data("AirPassengers")
plot(decompose(AirPassengers))
seq_down <- seq(.625, .125, -0.125)
seq_up <- seq(0, 1.5, 0.25)
y <- c(seq_down, seq_up, seq_down + .75, seq_up + .75, seq_down + 1.5,
seq_up + 1.5)
par(mfrow = c(1, 3))
plot(y, type = "b", ylim = c(-.1, 3))
plot(diff(y), ylim = c(-.1, 3), xlim = c(0, 36))
plot(diff(diff(y), lag = 12), ylim = c(-.1, 3), xlim = c(0, 36))
par(mfrow = c(1, 1))
par(mfrow=c(1,2))
acf(y)
pacf(y)
library(lubridate) # year, month
library(dplyr) # %>%
library(forecast) # auto.arima
cycle = read.csv('./Data/Ch6_ridership_data_2011-2012.csv')
str(data)
library(dplyr)
library(lubridate)
cycle$datetime = as.Date(cycle$datetime, format = '%Y-%m-%d')
str(cycle)
monthly_ride = cycle %>%
group_by(year = year(datetime), month = month(datetime)) %>%
summarise(riders = sum(count))
table(monthly_ride$year, monthly_ride$month)
riders = monthly_ride[,3]
monthly = ts(riders, frequency = 12, start = c(2011,1))
class(monthly)
monthly
plot(decompose(monthly))
plot(monthly)
y=diff(monthly)
plot(y)
z=diff(diff(monthly), lag =12)
plot(z)
par(mfrow=c(1,2))
acf(monthly)
pacf(monthly)
model1 = arima(monthly, c(1,0,0), seasonal=list(order=c(0,0,0)))
model2 = arima(monthly, c(1,1,0), seasonal=list(order=c(0,0,0)))
model3 = arima(monthly, c(2,1,0), seasonal=list(order=c(0,0,0)))
model4 = arima(monthly, c(1,1,0), seasonal=list(order=c(0,1,0)))
model5 = arima(monthly, c(0,1,1), seasonal=list(order=c(0,0,0)))
aic = c(model1$aic, model2$aic, model3$aic, model4$aic, model5$aic)
model = seq(1:5)
p_value = c(model1$p)
df = data.frame(model, aic)
df
tsdiag(model1)
tsdiag(model1)
tsdiag(model1)
tsdiag(model2)
tsdiag(model3)
tsdiag(model4)
tsdiag(model5)
tsdiag(model1)
tsdiag(model1)
tsdiag(model1)
tsdiag(model1)
tsdiag(model2)
tsdiag(model1)
tsdiag(model3)
par(mfrow=c(1,2))
acf(monthly)
pacf(monthly)
